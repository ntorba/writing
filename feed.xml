<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://ntorba.github.io/writing/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ntorba.github.io/writing/" rel="alternate" type="text/html" /><updated>2020-08-27T06:29:39-05:00</updated><id>https://ntorba.github.io/writing/feed.xml</id><title type="html">Turbo</title><subtitle>Imma write some things here</subtitle><entry><title type="html">Title</title><link href="https://ntorba.github.io/writing/2020/08/26/Untitled.html" rel="alternate" type="text/html" title="Title" /><published>2020-08-26T00:00:00-05:00</published><updated>2020-08-26T00:00:00-05:00</updated><id>https://ntorba.github.io/writing/2020/08/26/Untitled</id><content type="html" xml:base="https://ntorba.github.io/writing/2020/08/26/Untitled.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/Untitled.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Launch a Seldon Deployment</title><link href="https://ntorba.github.io/writing/kubernetes/docker/2020/07/30/first-seldon-deployment.html" rel="alternate" type="text/html" title="Launch a Seldon Deployment" /><published>2020-07-30T00:00:00-05:00</published><updated>2020-07-30T00:00:00-05:00</updated><id>https://ntorba.github.io/writing/kubernetes/docker/2020/07/30/first-seldon-deployment</id><content type="html" xml:base="https://ntorba.github.io/writing/kubernetes/docker/2020/07/30/first-seldon-deployment.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-07-30-first-seldon-deployment.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Reqs&quot;&gt;Reqs&lt;a class=&quot;anchor-link&quot; href=&quot;#Reqs&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;access to kubernetes cluster &lt;ul&gt;
&lt;li&gt;If you are coming from &lt;a href=&quot;https://ntorba.github.io/writing/jupyter/2020/07/17/local-kubernetes.html&quot;&gt;Launch a local kubernetes cluster&lt;/a&gt;, you are good to follow this example. If not, you can quickly follow that post before running the example here!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Goal&quot;&gt;Goal&lt;a class=&quot;anchor-link&quot; href=&quot;#Goal&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Launch first seldon deployment with grpc or rest &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Steps&quot;&gt;Steps&lt;a class=&quot;anchor-link&quot; href=&quot;#Steps&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Define a seldon python component&lt;/li&gt;
&lt;li&gt;Build docker image&lt;/li&gt;
&lt;li&gt;Run a container based on docker image to test the endpoint&lt;/li&gt;
&lt;li&gt;Define SeldonDeployment yaml file &lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl apply&lt;/code&gt; SeldonDeployment to the kubernetes cluster. &lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Define-Python-Component&quot;&gt;Define Python Component&lt;a class=&quot;anchor-link&quot; href=&quot;#Define-Python-Component&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I'm taking this example code directly from &lt;a href=&quot;https://github.com/SeldonIO/seldon-core/blob/master/examples/models/sklearn_iris/sklearn_iris.ipynb&quot;&gt;seldon-core irisClassifier example&lt;/a&gt;. 
First, we train a model based on the iris dataset included in the sklearn package, then we serve that trained model in the seldon endpoint.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#hide_output&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;mkdir iris_classifier
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;details class=&quot;description&quot; open=&quot;&quot;&gt;
      &lt;summary class=&quot;btn btn-sm&quot; data-open=&quot;Hide Code&quot; data-close=&quot;Show Code&quot;&gt;&lt;/summary&gt;
        &lt;p&gt;&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%%writefile&lt;/span&gt; iris_classifier/train_iris.py
&lt;span class=&quot;c1&quot;&gt;#collapse_show&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#hide_output&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;joblib&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.pipeline&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pipeline&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.linear_model&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogisticRegression&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasets&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;OUTPUT_FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;iris_classifier/IrisClassifier.sav&amp;quot;&lt;/span&gt;


&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Loading iris data set...&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_iris&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Dataset loaded!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogisticRegression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;liblinear&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multi_class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ovr&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;clf&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Training model...&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Model trained!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Saving model in &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUTPUT_FILE&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;joblib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OUTPUT_FILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Model saved!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
    &lt;/details&gt;
&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Overwriting iris_classifier/train_iris.py
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#hide_output&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;python iris_classifier/train_iris.py
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Next, we define the seldon python component that will be used to serve the model. 
Seldon has a few &lt;a href=&quot;https://docs.seldon.io/projects/seldon-core/en/v1.1.0/python/python_component.html&quot;&gt;components&lt;/a&gt;. In this example, we only use the Model component. Seldon components hold the logic that will be implanted into the serving endpoint that seldon creates. The model component must have a predict function, which is called when the future endpoint is hit. 
The reason seldon is so useful is because this is the only python code we need to write to serve this model. Seldon provides the rest of the logic, which puts this component into a web server, to serve the model.&lt;/p&gt;
&lt;p&gt;An important note about this section is that you'lll see the file is named &lt;code&gt;IrisClassifier.py&lt;/code&gt;, which is camelcased. This is important, and you should not change this. The file name and the python component class name &lt;strong&gt;must match&lt;/strong&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;details class=&quot;description&quot; open=&quot;&quot;&gt;
      &lt;summary class=&quot;btn btn-sm&quot; data-open=&quot;Hide Code&quot; data-close=&quot;Show Code&quot;&gt;&lt;/summary&gt;
        &lt;p&gt;&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%%writefile&lt;/span&gt; iris_classifier/IrisClassifier.py
&lt;span class=&quot;c1&quot;&gt;#collapse_show&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#hide_output&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;joblib&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IrisClassifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joblib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;IrisClassifier.sav&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;features_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict_proba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
    &lt;/details&gt;
&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Overwriting iris_classifier/IrisClassifier.py
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Build-Docker-Image&quot;&gt;Build Docker Image&lt;a class=&quot;anchor-link&quot; href=&quot;#Build-Docker-Image&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;After defining a python component, there are two ways to create the docker image necessary for deployment.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.seldon.io/projects/seldon-core/en/v1.1.0/python/python_wrapping_docker.html&quot;&gt;define a Dockerfile&lt;/a&gt; which launches the seldon microservice&lt;/li&gt;
&lt;li&gt;use &lt;a href=&quot;https://docs.seldon.io/projects/seldon-core/en/v1.1.0/wrappers/s2i.html&quot;&gt;s2i&lt;/a&gt; to build the image directly from source code. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I prefer manually defining a Dockerfile because it provides more control over the process. However, s2i is a great tool that works just as well.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Write-requirements.txt&quot;&gt;Write requirements.txt&lt;a class=&quot;anchor-link&quot; href=&quot;#Write-requirements.txt&quot;&gt; &lt;/a&gt;&lt;/h4&gt;&lt;p&gt;We must write a requirements.txt library with all requirements for the docker image listed.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%%writefile&lt;/span&gt; iris_classifier/requirements.txt
&lt;span class=&quot;c1&quot;&gt;#hide_output&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sklearn&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;seldon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Define-Dockerfile&quot;&gt;Define Dockerfile&lt;a class=&quot;anchor-link&quot; href=&quot;#Define-Dockerfile&quot;&gt; &lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The Dockerfile follows the example provided &lt;a href=&quot;https://docs.seldon.io/projects/seldon-core/en/v1.1.0/python/python_wrapping_docker.html&quot;&gt;here&lt;/a&gt;. 
We start from the python:3.7-slim base image, copy the code from the current directory, which includes the python component we defined earlier, install requirements, then expose port 5000 for the microservice to run. 
Next, we define seldon specific variables.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MODEL_NAME must match the python file name (which also much match the python component class name). &lt;/li&gt;
&lt;li&gt;API_TYPE can be either REST or GRPC.&lt;/li&gt;
&lt;li&gt;SERVICE_TYPE is the type of seldon component. MODEL for this example. (explore the other seldon components &lt;a href=&quot;&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PERSISTENCE: 0 or 1. Defaults to 0. If it is set to 1, the component class will be periodically persisted to reis. This s unnecessary for our case because the component class will not change.&lt;ul&gt;
&lt;li&gt;this would be more pertinent for components like routers, which can have updating states for long running jobs. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;details class=&quot;description&quot; open=&quot;&quot;&gt;
      &lt;summary class=&quot;btn btn-sm&quot; data-open=&quot;Hide Code&quot; data-close=&quot;Show Code&quot;&gt;&lt;/summary&gt;
        &lt;p&gt;&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%%writefile&lt;/span&gt; iris_classifier/Dockerfile
&lt;span class=&quot;c1&quot;&gt;#collapse_show&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#hide_output&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slim&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;COPY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;WORKDIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXPOSE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Define environment variable&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ENV&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MODEL_NAME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IrisClassifier&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;ENV&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;API_TYPE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REST&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ENV&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SERVICE_TYPE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MODEL&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;ENV&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PERSISTENCE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# seldon-core-microservice is a command line tool installed with the seldon-core python libray. You can use this locally as well!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CMD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seldon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;microservice&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MODEL_NAME&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;API_TYPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SERVICE_TYPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;persistence&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PERSISTENCE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
    &lt;/details&gt;
&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Overwriting iris_classifier/Dockerfile
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;To test this example, let's build and run the docker image!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Docker-Build&quot;&gt;Docker Build&lt;a class=&quot;anchor-link&quot; href=&quot;#Docker-Build&quot;&gt; &lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Pass the iris_classifier dir where the image guts live, then pass a -t to tag the image with a name referring to your preferred docker image repository (I'm running on locally).&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#hide_output&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;docker build iris_classifier/ -t localhost:5000/iris_ex:latest
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Test-Image&quot;&gt;Test Image&lt;a class=&quot;anchor-link&quot; href=&quot;#Test-Image&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You can test your newly created image by running the image and hitting the endpoint. 
You may ask yourself at this point, &quot;if I have a working docker image, what do I need kubernetes for?&quot; 
This is a great question. For simple use cases, this docker image itself is all you need, and you could run it as a standalone service. If the load is small and you can run it without any load balancing functionalities, you are good to go. 
However, kubernetes is a container orchestration engine. That means it is built to handle complex containerized applications and will make your life much easier if you need to handle more complex operations for applications that need to serve on a large scale.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;docker run --name &lt;span class=&quot;s2&quot;&gt;&amp;quot;iris_predictor&amp;quot;&lt;/span&gt; -d --rm -p &lt;span class=&quot;m&quot;&gt;5001&lt;/span&gt;:5000 localhost:5000/iris_ex:latest
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;4d88f1163a71622fc2b67f33b8af4e95c2c8dafa9da43e2fe8c06e4322b7591c
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;You could also remove the -d argument from the above command and run this command in a separate window to see the log output while sending requests to the endpoint. Test the endpoint with the curl below!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;grpc&lt;/span&gt; 
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;seldon_core.proto&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prediction_pb2&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;seldon_core.proto&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prediction_pb2_grpc&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;### Test Rest Endpoint&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;curl -s http://localhost:5001/predict -H &lt;span class=&quot;s2&quot;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d &lt;span class=&quot;s1&quot;&gt;&amp;#39;{&amp;quot;data&amp;quot;:{&amp;quot;ndarray&amp;quot;:[[5.964,4.006,2.081,1.031]]}}&amp;#39;&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;### Test GRPC Endpoint&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# data = np.array([[5.964,4.006,2.081,1.031]])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# datadef = prediction_pb2.DefaultData(&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     tensor=prediction_pb2.Tensor(shape=data.shape, values=data.flatten())&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# )&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# request = prediction_pb2.SeldonMessage(data=datadef)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# with grpc.insecure_channel(&amp;quot;localhost:5001&amp;quot;) as channel:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     stub = prediction_pb2_grpc.ModelStub(channel)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     response = stub.Predict(request=request)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# print(response)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;If you see successful output, you have your first seldon-core-microservice up and running! Now, we will deploy this as a simple inference graph on our kubernetes cluster. 
First, let's take down the running docker container:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Next, need to define our deployment configuration file. Here is a seldon config file for our deployment:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;docker container rm iris_predictor --force
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;iris_predictor
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%%writefile&lt;/span&gt; iris_classifier/sklearn_iris_deployment.yaml
&lt;span class=&quot;c1&quot;&gt;#hide_output&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;machinelearning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seldon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1alpha2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeldonDeployment&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seldon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deployment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sklearn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deployment&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;predictors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;componentSpecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seldonio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sklearn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IfNotPresent&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sklearn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classifier&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REST&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sklearn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classifier&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MODEL&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sklearn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predictor&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Some important notes about the deployment config:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;apiVersion: this sends out request to the appropriate endpoint of the kubernets api, which was installed by helm earlier in this tutorial&lt;/li&gt;
&lt;li&gt;kind: tells Kubernetes what kind of resource to create. &lt;/li&gt;
&lt;li&gt;metadata: add labels, like name, to the deployment&lt;/li&gt;
&lt;li&gt;spec: &lt;ul&gt;
&lt;li&gt;predictors: this is a list of predictors to deploy. It is a list because you have the option to create multiple inference graphs in the same spec. This is useful for things like Canary deployment, where you only want a new graph to recieve a small percentage of traffic&lt;ul&gt;
&lt;li&gt;componentSpecs: add information about the containers that need to be pulled to create our graph. In our case, we only need a single containe to serve our model. If we were creating a more complex inference graph (maybe with a transformer, router, and another model, then we would need to include the docker containers that house them in this section)&lt;/li&gt;
&lt;li&gt;graph: this is where you define the flow of components. This is easy in our case, there is only one component so we define one endpoint with no children. If there were more compnoents, we would fill out the children componenets in the children attriubte of the head of the graph. Seldon graphs are built implicitly through the use of the children attribute of each node in the graph. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is one last step to deploy our graph, we must push our docker container to a registry! I am running a local registry with my kind cluster, thanks to the script given &lt;a href=&quot;https://kind.sigs.k8s.io/docs/user/local-registry/&quot;&gt;here&lt;/a&gt;. You can also push to DockerHub as well.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;docker push localhost:5000/iris_ex:latest
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;The push refers to repository [localhost:5000/iris_ex]

60d57b93: Preparing 
43291ec5: Preparing 
63f2d025: Preparing 
f01300cf: Preparing 
a0be9040: Preparing 
1a837902: Preparing 
60d57b93: Pushed     276MB/269.5MBAlatest: digest: sha256:b100e77cc2fc9b8b22f043f5d2c061f4d85bf891d84e21641c0cec1844f345f2 size: 1792
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;With our docker image in a registry, it is available to our cluster, so we can deploy!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;kubectl apply -f iris_classifier/sklearn_iris_deployment.yaml
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# give the clsuter some to get the deployment running before executing the rollout&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;seldondeployment.machinelearning.seldon.io/seldon-deployment-example created
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;You can check the status of your deployment.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;kubectl rollout status deploy/&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;kubectl get deploy -l seldon-deployment-id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;seldon-deployment-example &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
                                 &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;{.items[0].metadata.name}&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Waiting for deployment &amp;#34;seldon-92a927e5e90d7602e08ba9b9304f70e8&amp;#34; rollout to finish: 0 of 1 updated replicas are available...
deployment &amp;#34;seldon-92a927e5e90d7602e08ba9b9304f70e8&amp;#34; successfully rolled out
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Once the deployment is ready, you will need to port-forward the pod to your localhost in order check the request. That can be done wiht kubectl port-forward command&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl port-forward &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;kubectl get pods -l seldon-app&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;seldon-deployment-example-sklearn-iris-predictor -o &lt;span class=&quot;nv&quot;&gt;jsonpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;{.items[0].metadata.name}&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9000&lt;/span&gt;:9000
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You must run this command in a separate window because it will need to run while we curl the endpoint.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# dir(prediction_pb2_grpc) &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;grpc&lt;/span&gt; 
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;seldon_core.proto&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prediction_pb2&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;seldon_core.proto&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prediction_pb2_grpc&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;### Test REST endpoint&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;curl -s http://localhost:9000/predict -H &lt;span class=&quot;s2&quot;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d &lt;span class=&quot;s1&quot;&gt;&amp;#39;{&amp;quot;data&amp;quot;:{&amp;quot;ndarray&amp;quot;:[[5.964,4.006,2.081,1.031]]}}&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;### Test GRPC endpoint&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# data = np.array([[5.964,4.006,2.081,1.031]])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# datadef = prediction_pb2.DefaultData(tensor=prediction_pb2.Tensor(shape=data.shape, values=data.flatten()))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# request = prediction_pb2.SeldonMessage(data=datadef)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# with grpc.insecure_channel(&amp;quot;localhost:9000/predict&amp;quot;) as channel:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     stub = prediction_pb2_grpc.ModelStub(channel)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     print(dir(stub))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     response = stub.Predict(request=request)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# print(response)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;[&amp;#39;{&amp;#34;data&amp;#34;:{&amp;#34;names&amp;#34;:[&amp;#34;t:0&amp;#34;,&amp;#34;t:1&amp;#34;,&amp;#34;t:2&amp;#34;],&amp;#34;ndarray&amp;#34;:[[0.9548873249364169,0.04505474761561406,5.792744796895234e-05]]},&amp;#34;meta&amp;#34;:{}}&amp;#39;]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;You have successfully created a seldon endpoint on kubernetes!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;## Cleanup&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;kubectl delete -f sklearn_iris_deployment.yaml
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;seldondeployment.machinelearning.seldon.io &amp;#34;seldon-deployment-example&amp;#34; deleted
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Conclusion&quot;&gt;Conclusion&lt;a class=&quot;anchor-link&quot; href=&quot;#Conclusion&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In this quick example, we scratched the surface of seldon-core by deploying a simple model endpoint on kubernetes. 
If you are hungry for more, chech out more of the posts in the &lt;a href=&quot;&quot;&gt;Seldon Super Series&lt;/a&gt;. There, you can find notebooks similar to this that deploy more complex inference graphs, or dive into the underlying kubernetes concepts that seldon uses to make this possible!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Next-Up&quot;&gt;Next Up&lt;a class=&quot;anchor-link&quot; href=&quot;#Next-Up&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;other seldon components &lt;/li&gt;
&lt;li&gt;seldon graph construction &lt;/li&gt;
&lt;li&gt;multi-component inference graph&lt;/li&gt;
&lt;li&gt;operators and custom resources &lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Exploring Kubernetes API</title><link href="https://ntorba.github.io/writing/kubernetes/api/2020/07/27/exploring-kubernetes-api.html" rel="alternate" type="text/html" title="Exploring Kubernetes API" /><published>2020-07-27T00:00:00-05:00</published><updated>2020-07-27T00:00:00-05:00</updated><id>https://ntorba.github.io/writing/kubernetes/api/2020/07/27/exploring-kubernetes-api</id><content type="html" xml:base="https://ntorba.github.io/writing/kubernetes/api/2020/07/27/exploring-kubernetes-api.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-07-27-exploring-kubernetes-api.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Kubernets-API&quot;&gt;Kubernets API&lt;a class=&quot;anchor-link&quot; href=&quot;#Kubernets-API&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The &lt;a href=&quot;https://kubernetes.io/docs/concepts/overview/kubernetes-api/&quot;&gt;Kubernetes api&lt;/a&gt; is how all communication is passed to and within a kubernetes cluster. Any commands sent to kubernetes cluster with &lt;code&gt;kubectl&lt;/code&gt; are hitting endpoints in the kubernetes cluster, which allow the cluster to make the appropriate changes.&lt;/p&gt;
&lt;p&gt;Luckly for us, kubernetes makes it easy to explore the api through the use of &lt;code&gt;kubectl proxy&lt;/code&gt;. In this post we will look through the different paths of the api to see how different functionalites are exposed&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;kind create cluster --name explore
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Creating cluster &amp;#34;explore&amp;#34; ...
 &lt;span class=&quot;ansi-green-fg&quot;&gt;✓&lt;/span&gt; Ensuring node image (kindest/node:v1.17.0) 🖼
 &lt;span class=&quot;ansi-green-fg&quot;&gt;✓&lt;/span&gt; Preparing nodes 📦 7l
 &lt;span class=&quot;ansi-green-fg&quot;&gt;✓&lt;/span&gt; Writing configuration 📜7l
 &lt;span class=&quot;ansi-green-fg&quot;&gt;✓&lt;/span&gt; Starting control-plane 🕹️7l
 &lt;span class=&quot;ansi-green-fg&quot;&gt;✓&lt;/span&gt; Installing CNI 🔌7l
 &lt;span class=&quot;ansi-green-fg&quot;&gt;✓&lt;/span&gt; Installing StorageClass 💾7l
Set kubectl context to &amp;#34;kind-explore&amp;#34;
You can now use your cluster with:

kubectl cluster-info --context kind-explore

Have a question, bug, or feature request? Let us know! https://kind.sigs.k8s.io/#community 🙂
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;kubectx kind-explore
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Switched to context &amp;#34;kind-explore&amp;#34;.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;kubectl get pods
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;No resources found in default namespace.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;With a new cluster up and running, go to a terminal, and end the command
&lt;code&gt;kubectl proxy --port=8000&lt;/code&gt; (if port 8000 is taken, use a different number). 
You will want to run this command in a terminal because the server itself will need be running while we continue to execute commands from this notebook or your webrowser.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs/tasks/extend-kubernetes/http-proxy-access-api/&quot;&gt;Kubectl proxy&lt;/a&gt; is a built-in kubernetes command that exposes the kubernetes api to the user. With a kubectl proxy server running locally, we can visit the different api paths to see information about what api endpoints are available.&lt;/p&gt;
&lt;p&gt;To start exploring the kubernetes api, either go to &lt;code&gt;http://127.0.0.1:8000/apis&lt;/code&gt; in your browser, or use a curl in this notebook:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;curl http://127.0.0.1:8000/apis
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;{
  &amp;#34;kind&amp;#34;: &amp;#34;APIGroupList&amp;#34;,
  &amp;#34;apiVersion&amp;#34;: &amp;#34;v1&amp;#34;,
  &amp;#34;groups&amp;#34;: [
    {
      &amp;#34;name&amp;#34;: &amp;#34;apiregistration.k8s.io&amp;#34;,
      &amp;#34;versions&amp;#34;: [
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;apiregistration.k8s.io/v1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
        },
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;apiregistration.k8s.io/v1beta1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
        }
      ],
      &amp;#34;preferredVersion&amp;#34;: {
        &amp;#34;groupVersion&amp;#34;: &amp;#34;apiregistration.k8s.io/v1&amp;#34;,
        &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
      }
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;extensions&amp;#34;,
      &amp;#34;versions&amp;#34;: [
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;extensions/v1beta1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
        }
      ],
      &amp;#34;preferredVersion&amp;#34;: {
        &amp;#34;groupVersion&amp;#34;: &amp;#34;extensions/v1beta1&amp;#34;,
        &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
      }
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;apps&amp;#34;,
      &amp;#34;versions&amp;#34;: [
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;apps/v1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
        }
      ],
      &amp;#34;preferredVersion&amp;#34;: {
        &amp;#34;groupVersion&amp;#34;: &amp;#34;apps/v1&amp;#34;,
        &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
      }
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;events.k8s.io&amp;#34;,
      &amp;#34;versions&amp;#34;: [
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;events.k8s.io/v1beta1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
        }
      ],
      &amp;#34;preferredVersion&amp;#34;: {
        &amp;#34;groupVersion&amp;#34;: &amp;#34;events.k8s.io/v1beta1&amp;#34;,
        &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
      }
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;authentication.k8s.io&amp;#34;,
      &amp;#34;versions&amp;#34;: [
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;authentication.k8s.io/v1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
        },
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;authentication.k8s.io/v1beta1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
        }
      ],
      &amp;#34;preferredVersion&amp;#34;: {
        &amp;#34;groupVersion&amp;#34;: &amp;#34;authentication.k8s.io/v1&amp;#34;,
        &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
      }
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;authorization.k8s.io&amp;#34;,
      &amp;#34;versions&amp;#34;: [
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;authorization.k8s.io/v1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
        },
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;authorization.k8s.io/v1beta1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
        }
      ],
      &amp;#34;preferredVersion&amp;#34;: {
        &amp;#34;groupVersion&amp;#34;: &amp;#34;authorization.k8s.io/v1&amp;#34;,
        &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
      }
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;autoscaling&amp;#34;,
      &amp;#34;versions&amp;#34;: [
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;autoscaling/v1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
        },
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;autoscaling/v2beta1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v2beta1&amp;#34;
        },
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;autoscaling/v2beta2&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v2beta2&amp;#34;
        }
      ],
      &amp;#34;preferredVersion&amp;#34;: {
        &amp;#34;groupVersion&amp;#34;: &amp;#34;autoscaling/v1&amp;#34;,
        &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
      }
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;batch&amp;#34;,
      &amp;#34;versions&amp;#34;: [
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;batch/v1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
        },
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;batch/v1beta1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
        }
      ],
      &amp;#34;preferredVersion&amp;#34;: {
        &amp;#34;groupVersion&amp;#34;: &amp;#34;batch/v1&amp;#34;,
        &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
      }
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;certificates.k8s.io&amp;#34;,
      &amp;#34;versions&amp;#34;: [
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;certificates.k8s.io/v1beta1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
        }
      ],
      &amp;#34;preferredVersion&amp;#34;: {
        &amp;#34;groupVersion&amp;#34;: &amp;#34;certificates.k8s.io/v1beta1&amp;#34;,
        &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
      }
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;networking.k8s.io&amp;#34;,
      &amp;#34;versions&amp;#34;: [
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;networking.k8s.io/v1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
        },
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;networking.k8s.io/v1beta1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
        }
      ],
      &amp;#34;preferredVersion&amp;#34;: {
        &amp;#34;groupVersion&amp;#34;: &amp;#34;networking.k8s.io/v1&amp;#34;,
        &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
      }
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;policy&amp;#34;,
      &amp;#34;versions&amp;#34;: [
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;policy/v1beta1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
        }
      ],
      &amp;#34;preferredVersion&amp;#34;: {
        &amp;#34;groupVersion&amp;#34;: &amp;#34;policy/v1beta1&amp;#34;,
        &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
      }
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;rbac.authorization.k8s.io&amp;#34;,
      &amp;#34;versions&amp;#34;: [
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;rbac.authorization.k8s.io/v1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
        },
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;rbac.authorization.k8s.io/v1beta1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
        }
      ],
      &amp;#34;preferredVersion&amp;#34;: {
        &amp;#34;groupVersion&amp;#34;: &amp;#34;rbac.authorization.k8s.io/v1&amp;#34;,
        &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
      }
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;storage.k8s.io&amp;#34;,
      &amp;#34;versions&amp;#34;: [
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;storage.k8s.io/v1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
        },
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;storage.k8s.io/v1beta1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
        }
      ],
      &amp;#34;preferredVersion&amp;#34;: {
        &amp;#34;groupVersion&amp;#34;: &amp;#34;storage.k8s.io/v1&amp;#34;,
        &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
      }
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;admissionregistration.k8s.io&amp;#34;,
      &amp;#34;versions&amp;#34;: [
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;admissionregistration.k8s.io/v1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
        },
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;admissionregistration.k8s.io/v1beta1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
        }
      ],
      &amp;#34;preferredVersion&amp;#34;: {
        &amp;#34;groupVersion&amp;#34;: &amp;#34;admissionregistration.k8s.io/v1&amp;#34;,
        &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
      }
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;apiextensions.k8s.io&amp;#34;,
      &amp;#34;versions&amp;#34;: [
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;apiextensions.k8s.io/v1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
        },
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;apiextensions.k8s.io/v1beta1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
        }
      ],
      &amp;#34;preferredVersion&amp;#34;: {
        &amp;#34;groupVersion&amp;#34;: &amp;#34;apiextensions.k8s.io/v1&amp;#34;,
        &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
      }
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;scheduling.k8s.io&amp;#34;,
      &amp;#34;versions&amp;#34;: [
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;scheduling.k8s.io/v1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
        },
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;scheduling.k8s.io/v1beta1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
        }
      ],
      &amp;#34;preferredVersion&amp;#34;: {
        &amp;#34;groupVersion&amp;#34;: &amp;#34;scheduling.k8s.io/v1&amp;#34;,
        &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
      }
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;coordination.k8s.io&amp;#34;,
      &amp;#34;versions&amp;#34;: [
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;coordination.k8s.io/v1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
        },
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;coordination.k8s.io/v1beta1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
        }
      ],
      &amp;#34;preferredVersion&amp;#34;: {
        &amp;#34;groupVersion&amp;#34;: &amp;#34;coordination.k8s.io/v1&amp;#34;,
        &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;
      }
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;node.k8s.io&amp;#34;,
      &amp;#34;versions&amp;#34;: [
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;node.k8s.io/v1beta1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
        }
      ],
      &amp;#34;preferredVersion&amp;#34;: {
        &amp;#34;groupVersion&amp;#34;: &amp;#34;node.k8s.io/v1beta1&amp;#34;,
        &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
      }
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;discovery.k8s.io&amp;#34;,
      &amp;#34;versions&amp;#34;: [
        {
          &amp;#34;groupVersion&amp;#34;: &amp;#34;discovery.k8s.io/v1beta1&amp;#34;,
          &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
        }
      ],
      &amp;#34;preferredVersion&amp;#34;: {
        &amp;#34;groupVersion&amp;#34;: &amp;#34;discovery.k8s.io/v1beta1&amp;#34;,
        &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;
      }
    }
  ]
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;You'll see a big json reponse of kind &lt;code&gt;APIGroupList&lt;/code&gt;. This response shows a list of kubernets APIGroups, which are a mechanism kubernetes uses to make it easier for users to extend the kubernetes api (We will see how the seldon custom resource definition extends this api by the end of this post!)&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;kubectl create namespace tester
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;namespace/tester created
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;kubens tester
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Context &amp;#34;kind-explore&amp;#34; modified.
Active namespace is &amp;#34;tester&amp;#34;.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;curl http://127.0.0.1:8000/api/v1
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;{
  &amp;#34;kind&amp;#34;: &amp;#34;APIResourceList&amp;#34;,
  &amp;#34;groupVersion&amp;#34;: &amp;#34;v1&amp;#34;,
  &amp;#34;resources&amp;#34;: [
    {
      &amp;#34;name&amp;#34;: &amp;#34;bindings&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;Binding&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;
      ]
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;componentstatuses&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: false,
      &amp;#34;kind&amp;#34;: &amp;#34;ComponentStatus&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;get&amp;#34;,
        &amp;#34;list&amp;#34;
      ],
      &amp;#34;shortNames&amp;#34;: [
        &amp;#34;cs&amp;#34;
      ]
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;configmaps&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;ConfigMap&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;delete&amp;#34;,
        &amp;#34;deletecollection&amp;#34;,
        &amp;#34;get&amp;#34;,
        &amp;#34;list&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;,
        &amp;#34;watch&amp;#34;
      ],
      &amp;#34;shortNames&amp;#34;: [
        &amp;#34;cm&amp;#34;
      ],
      &amp;#34;storageVersionHash&amp;#34;: &amp;#34;qFsyl6wFWjQ=&amp;#34;
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;endpoints&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;Endpoints&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;delete&amp;#34;,
        &amp;#34;deletecollection&amp;#34;,
        &amp;#34;get&amp;#34;,
        &amp;#34;list&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;,
        &amp;#34;watch&amp;#34;
      ],
      &amp;#34;shortNames&amp;#34;: [
        &amp;#34;ep&amp;#34;
      ],
      &amp;#34;storageVersionHash&amp;#34;: &amp;#34;fWeeMqaN/OA=&amp;#34;
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;events&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;Event&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;delete&amp;#34;,
        &amp;#34;deletecollection&amp;#34;,
        &amp;#34;get&amp;#34;,
        &amp;#34;list&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;,
        &amp;#34;watch&amp;#34;
      ],
      &amp;#34;shortNames&amp;#34;: [
        &amp;#34;ev&amp;#34;
      ],
      &amp;#34;storageVersionHash&amp;#34;: &amp;#34;r2yiGXH7wu8=&amp;#34;
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;limitranges&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;LimitRange&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;delete&amp;#34;,
        &amp;#34;deletecollection&amp;#34;,
        &amp;#34;get&amp;#34;,
        &amp;#34;list&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;,
        &amp;#34;watch&amp;#34;
      ],
      &amp;#34;shortNames&amp;#34;: [
        &amp;#34;limits&amp;#34;
      ],
      &amp;#34;storageVersionHash&amp;#34;: &amp;#34;EBKMFVe6cwo=&amp;#34;
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;namespaces&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: false,
      &amp;#34;kind&amp;#34;: &amp;#34;Namespace&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;delete&amp;#34;,
        &amp;#34;get&amp;#34;,
        &amp;#34;list&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;,
        &amp;#34;watch&amp;#34;
      ],
      &amp;#34;shortNames&amp;#34;: [
        &amp;#34;ns&amp;#34;
      ],
      &amp;#34;storageVersionHash&amp;#34;: &amp;#34;Q3oi5N2YM8M=&amp;#34;
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;namespaces/finalize&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: false,
      &amp;#34;kind&amp;#34;: &amp;#34;Namespace&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;update&amp;#34;
      ]
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;namespaces/status&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: false,
      &amp;#34;kind&amp;#34;: &amp;#34;Namespace&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;get&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;
      ]
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;nodes&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: false,
      &amp;#34;kind&amp;#34;: &amp;#34;Node&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;delete&amp;#34;,
        &amp;#34;deletecollection&amp;#34;,
        &amp;#34;get&amp;#34;,
        &amp;#34;list&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;,
        &amp;#34;watch&amp;#34;
      ],
      &amp;#34;shortNames&amp;#34;: [
        &amp;#34;no&amp;#34;
      ],
      &amp;#34;storageVersionHash&amp;#34;: &amp;#34;XwShjMxG9Fs=&amp;#34;
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;nodes/proxy&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: false,
      &amp;#34;kind&amp;#34;: &amp;#34;NodeProxyOptions&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;delete&amp;#34;,
        &amp;#34;get&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;
      ]
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;nodes/status&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: false,
      &amp;#34;kind&amp;#34;: &amp;#34;Node&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;get&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;
      ]
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;persistentvolumeclaims&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;PersistentVolumeClaim&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;delete&amp;#34;,
        &amp;#34;deletecollection&amp;#34;,
        &amp;#34;get&amp;#34;,
        &amp;#34;list&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;,
        &amp;#34;watch&amp;#34;
      ],
      &amp;#34;shortNames&amp;#34;: [
        &amp;#34;pvc&amp;#34;
      ],
      &amp;#34;storageVersionHash&amp;#34;: &amp;#34;QWTyNDq0dC4=&amp;#34;
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;persistentvolumeclaims/status&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;PersistentVolumeClaim&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;get&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;
      ]
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;persistentvolumes&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: false,
      &amp;#34;kind&amp;#34;: &amp;#34;PersistentVolume&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;delete&amp;#34;,
        &amp;#34;deletecollection&amp;#34;,
        &amp;#34;get&amp;#34;,
        &amp;#34;list&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;,
        &amp;#34;watch&amp;#34;
      ],
      &amp;#34;shortNames&amp;#34;: [
        &amp;#34;pv&amp;#34;
      ],
      &amp;#34;storageVersionHash&amp;#34;: &amp;#34;HN/zwEC+JgM=&amp;#34;
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;persistentvolumes/status&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: false,
      &amp;#34;kind&amp;#34;: &amp;#34;PersistentVolume&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;get&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;
      ]
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;pods&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;Pod&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;delete&amp;#34;,
        &amp;#34;deletecollection&amp;#34;,
        &amp;#34;get&amp;#34;,
        &amp;#34;list&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;,
        &amp;#34;watch&amp;#34;
      ],
      &amp;#34;shortNames&amp;#34;: [
        &amp;#34;po&amp;#34;
      ],
      &amp;#34;categories&amp;#34;: [
        &amp;#34;all&amp;#34;
      ],
      &amp;#34;storageVersionHash&amp;#34;: &amp;#34;xPOwRZ+Yhw8=&amp;#34;
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;pods/attach&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;PodAttachOptions&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;get&amp;#34;
      ]
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;pods/binding&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;Binding&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;
      ]
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;pods/eviction&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;group&amp;#34;: &amp;#34;policy&amp;#34;,
      &amp;#34;version&amp;#34;: &amp;#34;v1beta1&amp;#34;,
      &amp;#34;kind&amp;#34;: &amp;#34;Eviction&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;
      ]
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;pods/exec&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;PodExecOptions&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;get&amp;#34;
      ]
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;pods/log&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;Pod&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;get&amp;#34;
      ]
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;pods/portforward&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;PodPortForwardOptions&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;get&amp;#34;
      ]
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;pods/proxy&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;PodProxyOptions&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;delete&amp;#34;,
        &amp;#34;get&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;
      ]
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;pods/status&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;Pod&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;get&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;
      ]
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;podtemplates&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;PodTemplate&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;delete&amp;#34;,
        &amp;#34;deletecollection&amp;#34;,
        &amp;#34;get&amp;#34;,
        &amp;#34;list&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;,
        &amp;#34;watch&amp;#34;
      ],
      &amp;#34;storageVersionHash&amp;#34;: &amp;#34;LIXB2x4IFpk=&amp;#34;
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;replicationcontrollers&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;ReplicationController&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;delete&amp;#34;,
        &amp;#34;deletecollection&amp;#34;,
        &amp;#34;get&amp;#34;,
        &amp;#34;list&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;,
        &amp;#34;watch&amp;#34;
      ],
      &amp;#34;shortNames&amp;#34;: [
        &amp;#34;rc&amp;#34;
      ],
      &amp;#34;categories&amp;#34;: [
        &amp;#34;all&amp;#34;
      ],
      &amp;#34;storageVersionHash&amp;#34;: &amp;#34;Jond2If31h0=&amp;#34;
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;replicationcontrollers/scale&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;group&amp;#34;: &amp;#34;autoscaling&amp;#34;,
      &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;,
      &amp;#34;kind&amp;#34;: &amp;#34;Scale&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;get&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;
      ]
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;replicationcontrollers/status&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;ReplicationController&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;get&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;
      ]
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;resourcequotas&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;ResourceQuota&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;delete&amp;#34;,
        &amp;#34;deletecollection&amp;#34;,
        &amp;#34;get&amp;#34;,
        &amp;#34;list&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;,
        &amp;#34;watch&amp;#34;
      ],
      &amp;#34;shortNames&amp;#34;: [
        &amp;#34;quota&amp;#34;
      ],
      &amp;#34;storageVersionHash&amp;#34;: &amp;#34;8uhSgffRX6w=&amp;#34;
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;resourcequotas/status&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;ResourceQuota&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;get&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;
      ]
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;secrets&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;Secret&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;delete&amp;#34;,
        &amp;#34;deletecollection&amp;#34;,
        &amp;#34;get&amp;#34;,
        &amp;#34;list&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;,
        &amp;#34;watch&amp;#34;
      ],
      &amp;#34;storageVersionHash&amp;#34;: &amp;#34;S6u1pOWzb84=&amp;#34;
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;serviceaccounts&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;ServiceAccount&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;delete&amp;#34;,
        &amp;#34;deletecollection&amp;#34;,
        &amp;#34;get&amp;#34;,
        &amp;#34;list&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;,
        &amp;#34;watch&amp;#34;
      ],
      &amp;#34;shortNames&amp;#34;: [
        &amp;#34;sa&amp;#34;
      ],
      &amp;#34;storageVersionHash&amp;#34;: &amp;#34;pbx9ZvyFpBE=&amp;#34;
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;services&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;Service&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;delete&amp;#34;,
        &amp;#34;get&amp;#34;,
        &amp;#34;list&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;,
        &amp;#34;watch&amp;#34;
      ],
      &amp;#34;shortNames&amp;#34;: [
        &amp;#34;svc&amp;#34;
      ],
      &amp;#34;categories&amp;#34;: [
        &amp;#34;all&amp;#34;
      ],
      &amp;#34;storageVersionHash&amp;#34;: &amp;#34;0/CO1lhkEBI=&amp;#34;
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;services/proxy&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;ServiceProxyOptions&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;create&amp;#34;,
        &amp;#34;delete&amp;#34;,
        &amp;#34;get&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;
      ]
    },
    {
      &amp;#34;name&amp;#34;: &amp;#34;services/status&amp;#34;,
      &amp;#34;singularName&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;namespaced&amp;#34;: true,
      &amp;#34;kind&amp;#34;: &amp;#34;Service&amp;#34;,
      &amp;#34;verbs&amp;#34;: [
        &amp;#34;get&amp;#34;,
        &amp;#34;patch&amp;#34;,
        &amp;#34;update&amp;#34;
      ]
    }
  ]
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Depth over Breadth</title><link href="https://ntorba.github.io/writing/markdown/learning/learning%20strategies/growth/2020/07/24/depth-over-breadth.html" rel="alternate" type="text/html" title="Depth over Breadth" /><published>2020-07-24T00:00:00-05:00</published><updated>2020-07-24T00:00:00-05:00</updated><id>https://ntorba.github.io/writing/markdown/learning/learning%20strategies/growth/2020/07/24/depth-over-breadth</id><content type="html" xml:base="https://ntorba.github.io/writing/markdown/learning/learning%20strategies/growth/2020/07/24/depth-over-breadth.html">&lt;p&gt;Depth over breadth was introduced to me while listening to &lt;a href=&quot;https://www.amazon.com/gp/product/0140230386/ref=as_li_qf_sp_asin_il_tl?imprToken=8S8HjpFN5qUYGel0nDft0A&amp;amp;slotNum=1&amp;amp;ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0140230386&amp;amp;linkCode=w61&amp;amp;tag=farnamstreet-20&quot;&gt;The Art of Learning&lt;/a&gt; by Josh Waitzkin. 
The main idea is that you can gain a much better understanding of the bigger picture (any object or field of study) by digging deep on a seemingly small part. For example, as a software engineer, depth over breadth is dedicating your time to a single programming language instead of trying to learn 3 at once. A deep understanding of a single language improves your general programming ability more than a shallow understanding of many. Not to mention, learning new languages after a deep understanding of one opens the door to many important, nuanced connections.&lt;/p&gt;

&lt;p&gt;Digging into the small part is what Josh calls the micro. “Depth over breadth” is understanding the macro (programming in general) from the micro (a single programming language).&lt;/p&gt;

&lt;p&gt;A great example Josh uses in the book is from &lt;a href=&quot;https://www.amazon.com/Zen-Art-Motorcycle-Maintenance-Inquiry/dp/0060839872/ref=sr_1_2?crid=5B53JPNMK4KC&amp;amp;dchild=1&amp;amp;keywords=the+art+of+motorcycle+maintenance&amp;amp;qid=1595588821&amp;amp;s=books&amp;amp;sprefix=The+art+of+motor%2Cstripbooks%2C142&amp;amp;sr=1-2&quot;&gt;The Art of Motorcycle Maintenance&lt;/a&gt;. The main character, Phadreus, is a professor at a college in Bozeman, Montana. He teaches literature and writing. At one point, a notably hard working student is stumped with writer’s block. The assignment is to write 500 words about Bozeman, a small town in rural Montana. Despite her determination, she just can’t get any words on the page. After many attempts to help, Phradreus frustratedly tells her “Narrow it down to the front of one building on the main street of Bozeman. The Opera House. Start with the upper left-hand brick.” The next day, the girl turns in a 5000 word essay. Starting with a single brick, she receives endless inspiration. Starting with something so small (the micro) gave her an entirely new view of the whole town (the macro).&lt;/p&gt;

&lt;p&gt;This idea takes our original software analogy even further. Forget focusing on an entire language. Focus on a single library. Tear it apart. Use the debugger and step through all levels of the code. Look at how the authors abstracted their ideas. Analyze the data structures. Look for the use of language specific features. Contribute to it.&lt;/p&gt;

&lt;p&gt;Deep understanding of a single library does much more than just help you understand that library. As you use others, you begin to see important connections, or striking differences. Those connections help you pick up new libraries much faster. You also begin to build a much deeper understanding of the language itself.&lt;/p&gt;

&lt;p&gt;With a strategy like this, you build a deeper understanding of the macro (a programming language, or even programming itself) by narrowing in on the micro (a specific library of a single language).&lt;/p&gt;</content><author><name></name></author><summary type="html">Depth over breadth was introduced to me while listening to The Art of Learning by Josh Waitzkin. The main idea is that you can gain a much better understanding of the bigger picture (any object or field of study) by digging deep on a seemingly small part. For example, as a software engineer, depth over breadth is dedicating your time to a single programming language instead of trying to learn 3 at once. A deep understanding of a single language improves your general programming ability more than a shallow understanding of many. Not to mention, learning new languages after a deep understanding of one opens the door to many important, nuanced connections.</summary></entry><entry><title type="html">Custom Resources and Operators</title><link href="https://ntorba.github.io/writing/kubernetes/docker/2020/07/20/dive-into-operators-and-custom-resources.html" rel="alternate" type="text/html" title="Custom Resources and Operators" /><published>2020-07-20T00:00:00-05:00</published><updated>2020-07-20T00:00:00-05:00</updated><id>https://ntorba.github.io/writing/kubernetes/docker/2020/07/20/dive-into-operators-and-custom-resources</id><content type="html" xml:base="https://ntorba.github.io/writing/kubernetes/docker/2020/07/20/dive-into-operators-and-custom-resources.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-07-20-dive-into-operators-and-custom-resources.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Intro&quot;&gt;Intro&lt;a class=&quot;anchor-link&quot; href=&quot;#Intro&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In this post we will walk through the basics behind the seldon custom resource definition. 
At a high level, kubernetes only job is to maintain the desired state of the cluster. All interactions are changes to the desired state. The magic of kubernetes is that once you tell it the new state, it creates and maintains that state for you. 
The seldon-core projects serves inferences graphs on kubernetes with a custom resource and operator. These provide automation of complex systems, while allowing us to easily configure the desired state of our deployments without doing a lot of manual work.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Launch-Cluster&quot;&gt;Launch Cluster&lt;a class=&quot;anchor-link&quot; href=&quot;#Launch-Cluster&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To get started, let's get a cluster up and running. If you followed &lt;a href=&quot;&quot;&gt;part 1&lt;/a&gt; of this series, you can do so with kind. 
Below, I create a cluster, create a namespace called seldon-intro, then use &lt;code&gt;kubens&lt;/code&gt; to make seldon-into my default namespace (so I don't have to include it in every command).&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;kind create cluster 
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;kubectl create namespace seldon-intro
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;kubens seldon-intro
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Creating cluster &amp;#34;kind&amp;#34; ...
 &lt;span class=&quot;ansi-green-fg&quot;&gt;✓&lt;/span&gt; Ensuring node image (kindest/node:v1.17.0) 🖼7l
 &lt;span class=&quot;ansi-green-fg&quot;&gt;✓&lt;/span&gt; Preparing nodes 📦 7l
 &lt;span class=&quot;ansi-green-fg&quot;&gt;✓&lt;/span&gt; Writing configuration 📜7l
 &lt;span class=&quot;ansi-green-fg&quot;&gt;✓&lt;/span&gt; Starting control-plane 🕹️7l
 &lt;span class=&quot;ansi-green-fg&quot;&gt;✓&lt;/span&gt; Installing CNI 🔌7l
 &lt;span class=&quot;ansi-green-fg&quot;&gt;✓&lt;/span&gt; Installing StorageClass 💾7l
Set kubectl context to &amp;#34;kind-kind&amp;#34;
You can now use your cluster with:

kubectl cluster-info --context kind-kind

Have a question, bug, or feature request? Let us know! https://kind.sigs.k8s.io/#community 🙂
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;KubeAPI,-Custom-Resources,-and-Operators&quot;&gt;KubeAPI, Custom Resources, and Operators&lt;a class=&quot;anchor-link&quot; href=&quot;#KubeAPI,-Custom-Resources,-and-Operators&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The KubeAPI is the medium through which all communication is handled in a kubernetes cluster. It is a rest server. When you send commands to a kubernetes cluster, you are hitting a specific api endpoint with commands for the server to execute. 
Kubernetes comes with some built-in objects you should be familiar with. Deployments, services, pods, etc. These objects are useful in and of themselves, but we often need to use many of them at once, which can get cumbersome. 
For those familiar with seldon, you know that you can create very complex inference graphs with many components. Instead of deploying and connecting all seldon services manually, we are able to build a single json/yaml configuration that deploys the entire graph. This is possible because of operators and custom resources. 
Operators and custom resources have an intimate relationship, and must be used in tandem. Earlier, I introduce the KubeAPI. We know that is how all internal and external communication is handled in the cluster. With operators, we extend the KubeAPI. In other words, operators allow us to add more endpoints to the KubeApi to carry out custom commands in our cluster. Which is where custom resources come in. They define the custom instructions for our new endpoint to execute. 
Let's see an operator and custom resource in action.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Install-Seldon-core&quot;&gt;Install Seldon-core&lt;a class=&quot;anchor-link&quot; href=&quot;#Install-Seldon-core&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I suggest using &lt;code&gt;helm&lt;/code&gt; to install seldon-core. If you haven't used helm before, use &lt;a href=&quot;https://helm.sh/&quot;&gt;this page&lt;/a&gt; to find install instructions. (If you're on a mac, just use &lt;code&gt;brew install helm&lt;/code&gt;). For those familiar with python, helm is like the pip for kubernetes. It works by using &lt;a href=&quot;https://helm.sh/docs/topics/charts/&quot;&gt;helm charts&lt;/a&gt;. A chart is a group of files that describe a higher level application using built-in kubernetes resources. For example, you could use a helm chart to deploy a full stack web application. We are going to use helm to install seldon-core and seldon-core-operator. These helm charts are what will allow us to deploy seldon inference graphs. You can learn more about helm charts &lt;a href=&quot;https://helm.sh/docs/topics/charts/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once helm is installed, use it to install seldon-core and seldon-core-operator with the following command:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;helm install seldon-core seldon-core-operator &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;googleapis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seldon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;charts&lt;/span&gt; \
    &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usageMetrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt; \
    &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ambassador&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt; \
    &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seldon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intro&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#unnecessary after using `kubens seldon-intro`, but keeping here to make sure the install is explicit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;NAME: seldon-core
LAST DEPLOYED: Mon Jul 27 08:32:08 2020
NAMESPACE: seldon-intro
STATUS: deployed
REVISION: 1
TEST SUITE: None
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;After a successful install of seldon-core and seldon-core-operator, run the following command:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;kubectl get deployments
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;NAME                        READY   UP-TO-DATE   AVAILABLE   AGE
seldon-controller-manager   1/1     1            1           6s
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;We see we now have a deployment, &lt;code&gt;seldon-controller-manager&lt;/code&gt;, running in our seldon-intro namespace.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;kubectl describe svc seldon-webhook-service
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;



&lt;div class=&quot;output_text output_subarea output_execute_result&quot;&gt;
&lt;pre&gt;[&amp;#39;Name:              seldon-webhook-service&amp;#39;,
 &amp;#39;Namespace:         seldon-intro&amp;#39;,
 &amp;#39;Labels:            app=seldon&amp;#39;,
 &amp;#39;                   app.kubernetes.io/instance=seldon-core&amp;#39;,
 &amp;#39;                   app.kubernetes.io/managed-by=Helm&amp;#39;,
 &amp;#39;                   app.kubernetes.io/name=seldon-core-operator&amp;#39;,
 &amp;#39;                   app.kubernetes.io/version=1.2.1&amp;#39;,
 &amp;#39;Annotations:       meta.helm.sh/release-name: seldon-core&amp;#39;,
 &amp;#39;                   meta.helm.sh/release-namespace: seldon-intro&amp;#39;,
 &amp;#39;Selector:          app.kubernetes.io/instance=seldon1,app.kubernetes.io/name=seldon,app.kubernetes.io/version=v0.5,app=seldon,control-plane=seldon-controller-manager&amp;#39;,
 &amp;#39;Type:              ClusterIP&amp;#39;,
 &amp;#39;IP:                10.96.113.42&amp;#39;,
 &amp;#39;Port:              &amp;lt;unset&amp;gt;  443/TCP&amp;#39;,
 &amp;#39;TargetPort:        443/TCP&amp;#39;,
 &amp;#39;Endpoints:         10.244.0.5:443&amp;#39;,
 &amp;#39;Session Affinity:  None&amp;#39;,
 &amp;#39;Events:            &amp;lt;none&amp;gt;&amp;#39;]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The docker image name used to create the seldon-controller-manager pod and deployment is called &lt;code&gt;docker.io/seldonio/seldon-core-operator:1.2.1&lt;/code&gt;. That is because the seldon-controller-manager is the seldon-core-operator.&lt;/p&gt;
&lt;p&gt;Be sure to match the last line with the namespace you created in the previous command. We will talk more about what the other lines mean later in the series. 
After installing, run&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;kubectl get pods -o wide
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;and you'll see you have a pod running with seldon-controller-manager in the name (followed by a random string, we will talk about why that is soon). Next, run&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;kubectl get deployments
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Seldon-controller-manager is a kubernetes operator. As described &lt;a href=&quot;https://www.jaegertracing.io/docs/1.16/operator/&quot;&gt;here&lt;/a&gt;, kubernetes operators are extensions of the kubernetes api that allow users to easily package and deploy complex applications on kubernetes. The seldon-core-operator adds a lot of functionality to the kubernetes cluster and allows us to interact with seldon deployments as if they were a built-in kubernetes object. Along with this, we also installed the seldon-core custom resource definition. Kubernetes custom resources are extensions of the native kuberetes api. As you will see soon, we will now be able to deploy and interact with a new structure, the &lt;code&gt;sdep&lt;/code&gt;, in the same fashion we deploy and monitor kubernetes deployments, servives, and other built-in resources.&lt;/p&gt;
&lt;p&gt;All interactions with a kubernetes cluster is the user specifying a new desired state, and the kubernetes cluster using it's resources to change into that desired state. When, a custom resource is created, an operator is needed as well to tell kubernetes how to handle updates to the desired state of the custom resource. 
The seldon-core operator is what allows users to make edits to currently running seldon deployments without downtime.&lt;/p&gt;
&lt;p&gt;Operators allows kubernetes to run stateful applications. A popular usecase for operators is databases.&lt;/p&gt;
&lt;p&gt;To get a better idea at how helm charts add to your kubernetes cluster, check out the &lt;a href=&quot;&quot;&gt;Exploring the Kubernetes API&lt;/a&gt; post digs into the basic internals of how your cluster actually receives commands.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;https://enterprisersproject.com/article/2019/2/kubernetes-operators-plain-english?page=1&quot;&gt;this post&lt;/a&gt;, they write&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;If you had to sum up Kubernetes in a word, the best choice might not be “orchestration” but “automation.” That’s what it’s all about:Kubernetes enables the automation of the infrastructure (and corresponding operational burden of managing that infrastructure) necessary for running containerized applications – a must when running these apps at scale in production environments.
This is very evident with the Seldon deployment CRD and operator. As we move along and start to create our own seldon deployments, you will see the power of this automation. With a single file, a seldon deployment will launch multiple services, deployments, pods, and allow for continuous updates of all those components through the Kubernetes api. Seldon has leveraged the power of the automation offered by kubernetes to create inferences graphs of many components.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another great quote from that article:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;“Operators are simplifying the process highly complex distributed database management by defining the installation, scale, updates, and management lifecycle of a stateful clustered application,” says Yossi Jana, DevOps team leader at AllCloud. From another vantage point, consider life without Operators. “Without Operators, many applications need intervention to deploy, scale, reconfigure, upgrade, or recover from faults,” Thompson says. “If your app – or apps that you depend on, such as your database management system – [requires] DevOps engineers hovering over a keyboard in these critical moments, hoping they get the steps correctly, you’re almost certain to have greater downtime and more stress in your team.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From &lt;a href=&quot;https://opensource.com/article/20/3/kubernetes-operator-sdk&quot;&gt;kubernetes-operator-sdk tutorial&lt;/a&gt;, operators are used to define custom resources. They extend the kubernetes api to tell the cluster how to handle those resources. 
Operators themselves run in pods. This is why you see the seldon-controller-manager deployment and pod running after we install seldon-core with helm.&lt;/p&gt;
&lt;p&gt;As described in the kubernetes docs &lt;a href=&quot;https://kubernetes.io/docs/concepts/extend-kubernetes/operator/&quot;&gt;here&lt;/a&gt;, operators follow the controller pattern, which means they are responsible for keep the desired state of the custom resource they are responsible for. 
The seldon-core-operator is responsbile for the Seldon Deployment custom resource. That means, when we create or edit a seldon deployment, the seldon-core-operator is responsible for adjusting the kubernetes deployment to the desired state to meet the new edits applied by the user.&lt;/p&gt;
&lt;p&gt;In every article you read about kubernetes operators, you'll find some sentiment to the fact that is confusing the first time around. In fact, pretty much everything you learn about kubernetes will be confusing the first time around. Don't let that discourage you. That is why we are using seldon to help our understanding. Instead of reading description after description of what a custom resource and operator are, let's actually use them to begin to understand the power they provide.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Let's launch our first seldon deployment onto the cluster to see what the consequences of creating a seldon deployment custom resource are.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;%%bash
kubectl apply -f - &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt; END&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;apiVersion: machinelearning.seldon.io/v1alpha2&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind: SeldonDeployment&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  name: iris-model&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  name: sklearn-iris-deployment&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  predictors:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  - componentSpecs:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    - spec:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;        containers:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;        - image: seldonio/sklearn-iris:0.1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;          imagePullPolicy: IfNotPresent&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;          name: sklearn-iris-classifier&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    graph:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;      children: []&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;      endpoint:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;        type: REST&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;      name: sklearn-iris-classifier&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;      type: MODEL&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    name: predictor&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    replicas: 1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;END&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;kubectl get pods
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ntorba.github.io/writing/images/chart-preview.png" /><media:content medium="image" url="https://ntorba.github.io/writing/images/chart-preview.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Cluster Interaction Basics</title><link href="https://ntorba.github.io/writing/kubernetes/docker/2020/07/18/cluster-interaction-basics.html" rel="alternate" type="text/html" title="Cluster Interaction Basics" /><published>2020-07-18T00:00:00-05:00</published><updated>2020-07-18T00:00:00-05:00</updated><id>https://ntorba.github.io/writing/kubernetes/docker/2020/07/18/cluster-interaction-basics</id><content type="html" xml:base="https://ntorba.github.io/writing/kubernetes/docker/2020/07/18/cluster-interaction-basics.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-07-18-cluster-interaction-basics.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Intro&quot;&gt;Intro&lt;a class=&quot;anchor-link&quot; href=&quot;#Intro&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This post walks through some kubernetes basics and launches your first deployment and service on your cluster.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ntorba.github.io/writing/images/chart-preview.png" /><media:content medium="image" url="https://ntorba.github.io/writing/images/chart-preview.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Seldon Super Series</title><link href="https://ntorba.github.io/writing/markdown/seldon/kubernetes/python/2020/07/17/seldon-super-series.html" rel="alternate" type="text/html" title="Seldon Super Series" /><published>2020-07-17T00:00:00-05:00</published><updated>2020-07-17T00:00:00-05:00</updated><id>https://ntorba.github.io/writing/markdown/seldon/kubernetes/python/2020/07/17/seldon-super-series</id><content type="html" xml:base="https://ntorba.github.io/writing/markdown/seldon/kubernetes/python/2020/07/17/seldon-super-series.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;I work on a team building an ML platform to allow researchers to deploy, monitor, and iterate on production machine learning models. The platform leverages &lt;a href=&quot;https://docs.seldon.io/projects/seldon-core/en/v1.1.0/&quot;&gt;seldon-core&lt;/a&gt;, an open source platform to deploy scalable machine learning models on kubernetes. 
Kubernetes is an intimidating subject. From the control-plane, to pods, to volumes, to everything else, there is always more you didn’t even know you didn’t know. My journey to getting familiar with kubernetes was learning through seldon-core. I had never used kubernetes before, but to leverage seldon, it is necessary. Over the past few months I’ve become comfortable developing, debugging, and deploying projects on a kubernetes cluster. 
Seldon-core is a great project to build kubernetes knowledge around. It leverages some advanced kubernetes concepts under the hood, while remaining easy to use and powerful. Not to mention, it is much easier to build motivation around a subject when you are actually building, instead of just reading the documentation.&lt;/p&gt;

&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;/h2&gt;
&lt;p&gt;I am not a kubernetes expert, but I have become comfortable enough to be highly productive working with kubernetes. This comfort level was developed through muscle memory using common kubectl commands, learning the basics of kubernetes built-in objects vs custom resources, finding errors, and more. With that in mind, here are my goals:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Main goal: Give readers a clear path to the “highly productive with kubernetes” level.&lt;/li&gt;
  &lt;li&gt;Stretch goal: Have readers match my comfort level in only one week. 
The Seldon Super Series is built around these goals. To do this, I wrote this series to lay out the resources I found my most useful along with some posts I wrote to show lessons I learned through trial and error.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;whos-it-for&quot;&gt;Who’s it for?&lt;/h4&gt;
&lt;p&gt;This series is useful for anyone looking to build a deeper understanding of kubernetes. Seldon-core is just a great vehicle for this learning. If you are also interested in leveraging seldon, all the better!
You can be a complete kubernetes beginner, or come with some familiarity. If you are already familiar with kubernetes, feel free to jump to posts further into the series that get into more complex material! 
All of the examples throughout this tutorial are written in python. Most of the code examples are straightforward, with the focus on kubernetes and seldon, so even if you have a different preferred language, you should be able to following along just as well. 
This series is useful for&lt;/p&gt;

&lt;h4 id=&quot;how-to-get-started&quot;&gt;How to get started&lt;/h4&gt;
&lt;p&gt;If you are completely new to kubernetes, there is no better place to start than the &lt;a href=&quot;https://kubernetes.io/docs/tutorials/kubernetes-basics/create-cluster/cluster-interactive/&quot;&gt;kubernetes interactive tutorial&lt;/a&gt;. I suggest following this tutorial all the way through before getting started on anything else. It requires no install, no setup, and introduces fundamentals used when working with any app deployed on a cluster. 
After that, I suggest following &lt;a href=&quot;https://ntorba.github.io/writing/jupyter/2020/07/17/local-kubernetes.html&quot;&gt;Launch a local kubernetes cluster&lt;/a&gt; to get a kubernetes cluster running on your local machine with &lt;a href=&quot;https://kubernetes.io/docs/setup/learning-environment/kind/&quot;&gt;kind&lt;/a&gt;. If that doesn’t work for you, there are many good resources available to get a cluster running on AWS or Google Cloud. Having a cluster to hack on is super imporant. You will not be able to build muscle memory without actually writing commands and debugging issues on your own setup. 
Once you have a cluster to hack on, get started with &lt;a href=&quot;https://ntorba.github.io/writing/kubernetes/docker/2020/07/30/first-seldon-deployment.html&quot;&gt;First Seldon Deployment&lt;/a&gt;. Even if you have previous seldon experience, I suggest starting, here, because many other posts will use this as a baseline to build on (don’t worry if you don’t start here, though, any post that does require some setup will make that clear).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://ntorba.github.io/writing/jupyter/2020/07/17/local-kubernetes.html&quot;&gt;Launch a local kubernetes cluster&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Get a local kubernetes cluster up and running so you can experiment locally! Important for those of us who don’t have easy access to a remote cluster.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ntorba.github.io/writing/kubernetes/docker/2020/07/30/first-seldon-deployment.html&quot;&gt;First Seldon Deployment&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Deploy a model endpoint on kubernetes!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Multi-component Seldon Deployment&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Use multiple seldon-core components to deploy and inference graph!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Explore the Kubernetes API&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl proxy&lt;/code&gt; to understand how to communicate with a kubernetes cluster!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Seldon-core Custom Resource and Operator&lt;/a&gt;. Create your first seldon deployment and read about what makes the seldon deployment custom resource so useful.
    &lt;ul&gt;
      &lt;li&gt;Take a closer look at how seldon-core and seldon-core-operator extend the kubernetes api and make it easy to deploy seldon inference graphs!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Debugging Seldon Deployments&lt;/a&gt;. Take a look at where to find your logs and diagnosis some common issues.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Seldon-core analytics and load testing with Locust&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Multi-pod Seldon Deployments&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;Deploy individual components of your inference graph in their own pods to define custom deployment specs!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Horizontal Pod Autoscaling Seldon Deployments&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Autoscaling your deployments!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;CD with Argocd&lt;/a&gt; 
    * Try out Argocd for continuous deployment!&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;why-seldon-core&quot;&gt;Why Seldon-core?&lt;/h1&gt;
&lt;p&gt;Seldon-core is an open source projects built by the London based startup &lt;a href=&quot;https://www.seldon.io/&quot;&gt;Seldon&lt;/a&gt;. With seldon-core, you can use python (and java) to easily deploy ML models built in any framework at scale. However, they offer tools for more than just model serving. With seldon-core, you construct an inference graph. The inference graph is built with &lt;a href=&quot;https://docs.seldon.io/projects/seldon-core/en/v1.1.0/python/python_component.html&quot;&gt;these components&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Model&lt;/li&gt;
  &lt;li&gt;Transformer&lt;/li&gt;
  &lt;li&gt;Combiner&lt;/li&gt;
  &lt;li&gt;Router
These additional components add the ability to create much more than just a single model. You can set up custom A/B tests, multi-armed bandits, scalable ensemble systems, and much more. In short, seldon-core inference graphs are powerful!&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Intro I work on a team building an ML platform to allow researchers to deploy, monitor, and iterate on production machine learning models. The platform leverages seldon-core, an open source platform to deploy scalable machine learning models on kubernetes. Kubernetes is an intimidating subject. From the control-plane, to pods, to volumes, to everything else, there is always more you didn’t even know you didn’t know. My journey to getting familiar with kubernetes was learning through seldon-core. I had never used kubernetes before, but to leverage seldon, it is necessary. Over the past few months I’ve become comfortable developing, debugging, and deploying projects on a kubernetes cluster. Seldon-core is a great project to build kubernetes knowledge around. It leverages some advanced kubernetes concepts under the hood, while remaining easy to use and powerful. Not to mention, it is much easier to build motivation around a subject when you are actually building, instead of just reading the documentation.</summary></entry><entry><title type="html">Local Kubernetes on KIND</title><link href="https://ntorba.github.io/writing/kubernetes/docker/2020/07/17/local-kubernetes-with-seldon.html" rel="alternate" type="text/html" title="Local Kubernetes on KIND" /><published>2020-07-17T00:00:00-05:00</published><updated>2020-07-17T00:00:00-05:00</updated><id>https://ntorba.github.io/writing/kubernetes/docker/2020/07/17/local-kubernetes-with-seldon</id><content type="html" xml:base="https://ntorba.github.io/writing/kubernetes/docker/2020/07/17/local-kubernetes-with-seldon.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-07-17-local-kubernetes-with-seldon.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Intro&quot;&gt;Intro&lt;a class=&quot;anchor-link&quot; href=&quot;#Intro&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Welcome to the first post of the &lt;a href=&quot;&quot;&gt;Seldon Super Series&lt;/a&gt;! This post is for those who don't yet have access to a kubernetes cluster. 
We'll walkthrough how to use &lt;a href=&quot;&quot;&gt;Kind&lt;/a&gt; to launch a cluster on you local machine! 
If you already have access to a kubernetes cluster, and also have &lt;code&gt;kubectl&lt;/code&gt; installed, then move onto &lt;a href=&quot;&quot;&gt;part 2&lt;/a&gt;! Otherwise, follow along here before you move on!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Reqs&quot;&gt;Reqs&lt;a class=&quot;anchor-link&quot; href=&quot;#Reqs&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;None! This is the first post in the series! &lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Goals&quot;&gt;Goals&lt;a class=&quot;anchor-link&quot; href=&quot;#Goals&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Launch a local kubernets cluster using kind, and install seldon on the cluster to allow you to follow along with the rest of the posts in this series&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Install-kubectl&quot;&gt;Install kubectl&lt;a class=&quot;anchor-link&quot; href=&quot;#Install-kubectl&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If this is the first time you've used kubernetes, you will need to install kubectl, the command line tool for interacting with kubernetes. This can be downloaded &lt;a href=&quot;https://kubernetes.io/docs/tasks/tools/install-kubectl/&quot;&gt;here&lt;/a&gt;. On mac you can use &lt;code&gt;brew install kubectl&lt;/code&gt;. 
Check your install by running:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;kubectl version --client --short
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Client Version: v1.18.5
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;You should see output similar to this. It shouldn't be a problem if you're version is a bit different than this.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Install-Kind&quot;&gt;Install Kind&lt;a class=&quot;anchor-link&quot; href=&quot;#Install-Kind&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If you're on mac, it's as simple as &lt;code&gt;brew install kind&lt;/code&gt;. If not, check out &lt;a href=&quot;https://kind.sigs.k8s.io/docs/user/quick-start/&quot;&gt;this page&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Create-your-First-Cluster&quot;&gt;Create your First Cluster&lt;a class=&quot;anchor-link&quot; href=&quot;#Create-your-First-Cluster&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Todo: ADD LOCAL REGISTRY. They need this for the following examples (or access to DockerHub)&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;kind create cluster 
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Creating cluster &amp;#34;kind&amp;#34; ...
 &lt;span class=&quot;ansi-green-fg&quot;&gt;✓&lt;/span&gt; Ensuring node image (kindest/node:v1.17.0) 🖼
 &lt;span class=&quot;ansi-green-fg&quot;&gt;✓&lt;/span&gt; Preparing nodes 📦 7l
 &lt;span class=&quot;ansi-green-fg&quot;&gt;✓&lt;/span&gt; Writing configuration 📜7l
 &lt;span class=&quot;ansi-green-fg&quot;&gt;✓&lt;/span&gt; Starting control-plane 🕹️7l
 &lt;span class=&quot;ansi-green-fg&quot;&gt;✓&lt;/span&gt; Installing CNI 🔌7l
 &lt;span class=&quot;ansi-green-fg&quot;&gt;✓&lt;/span&gt; Installing StorageClass 💾7l
Set kubectl context to &amp;#34;kind-kind&amp;#34;
You can now use your cluster with:

kubectl cluster-info --context kind-kind

Thanks for using kind! 😊
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;It's as simple as that. If it is your first time running kind, it will automatically download the appropiate docker image (something like kindest/node:1.17.0), which may take a few minutes. 
After that command is finished, check if your cluster is running:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;kubectl cluster-info
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;ansi-green-fg&quot;&gt;Kubernetes master&lt;/span&gt; is running at &lt;span class=&quot;ansi-yellow-fg&quot;&gt;https://127.0.0.1:32771&lt;/span&gt;
&lt;span class=&quot;ansi-green-fg&quot;&gt;KubeDNS&lt;/span&gt; is running at &lt;span class=&quot;ansi-yellow-fg&quot;&gt;https://127.0.0.1:32771/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy&lt;/span&gt;

To further debug and diagnose cluster problems, use &amp;#39;kubectl cluster-info dump&amp;#39;.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;If you see output like above, displaying info about your Kubernetes master and KubeDNS, then you have successfully launched a local kubernetes cluster!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Install-Seldon-core&quot;&gt;Install Seldon-core&lt;a class=&quot;anchor-link&quot; href=&quot;#Install-Seldon-core&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Because we will need seldon-core for all of the following posts, we will install it here. Anytime you need to re-launch a kind cluster to follow along the other posts, you will be able to run this notebook to get it back up and running.&lt;/p&gt;
&lt;p&gt;To install seldon-core on the cluster, use helm. To install helm itself, find directions &lt;a href=&quot;https://helm.sh/&quot;&gt;here&lt;/a&gt;, or use &lt;code&gt;brew install helm&lt;/code&gt; on mac.&lt;/p&gt;
&lt;p&gt;Once helm is installed, use it to install seldon-core and seldon-core-operator with the following command:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;helm install seldon-core seldon-core-operator &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;googleapis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seldon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;charts&lt;/span&gt; \
    &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usageMetrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt; \
    &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ambassador&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt; \
    &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seldon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intro&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;kubectl get pods
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;-----&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;kubectl get deployments
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;You should see a pod and deployment with &lt;code&gt;seldon-controller-manager&lt;/code&gt; in the name. This pod and deployment house the seldon-core operator, extends the kubernetes api. For now, just confirming that pod is running is all we need.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Bonus:-Install-kubectx-and-kubens&quot;&gt;Bonus: Install kubectx and kubens&lt;a class=&quot;anchor-link&quot; href=&quot;#Bonus:-Install-kubectx-and-kubens&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;As you follow through the next posts, I will be using the &lt;code&gt;kubectx&lt;/code&gt; and &lt;code&gt;kubens&lt;/code&gt; command line tools. If you are on mac, you can install them with brew: &lt;code&gt;brew install kubectx&lt;/code&gt;. This will download and install both &lt;code&gt;kubectx&lt;/code&gt; and &lt;code&gt;kubens&lt;/code&gt;. If you're not on mac, find install instructions &lt;a href=&quot;https://github.com/ahmetb/kubectx#installation&quot;&gt;here&lt;/a&gt;. 
These allow you to easily switch between kubernetes contexts and namespaces. You can perform all the same actions with &lt;code&gt;kubectl&lt;/code&gt;, but kubectx and kubens make some common commands much quicker.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ntorba.github.io/writing/images/chart-preview.png" /><media:content medium="image" url="https://ntorba.github.io/writing/images/chart-preview.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Good At Math Bad At Writing</title><link href="https://ntorba.github.io/writing/2020/05/07/Good-at-Math-Bad-At-Writing.html" rel="alternate" type="text/html" title="Good At Math Bad At Writing" /><published>2020-05-07T00:00:00-05:00</published><updated>2020-05-07T00:00:00-05:00</updated><id>https://ntorba.github.io/writing/2020/05/07/Good-at-Math-Bad-At-Writing</id><content type="html" xml:base="https://ntorba.github.io/writing/2020/05/07/Good-at-Math-Bad-At-Writing.html">&lt;p&gt;Good at Math, Bad at Writing&lt;/p&gt;

&lt;p&gt;The biggest failure of my education was the acceptance of the “good at math, bad at writing” label. It comes as no surprise that I ended up working as a software engineer, but it took until now to see how much time I wasted hating writing, when in fact, the underlying principles are strikingly similar.&lt;/p&gt;

&lt;p&gt;Looking at the end product, the similarities are hard to see. Books and programs are much different, but the process to generate them is quite similar. For both, the ultimate goal is to give the user/reader (“user” for software and “reader” for writing - they serve the same purpose) a particular experience by providing information in a well thought out structure. This goal is achieved using a set of tools and conventions. Software leverages programming languages with different designs (object oriented vs functional, for example) and frameworks (web application vs data application). Writing leverages spoken language with accepted structures such as short-stories, books, long-form, and poems. In both, deciding the general structure and design (picking a programming language vs picking a writing structure) is integral to creating the end experience you wish to generate.&lt;/p&gt;

&lt;p&gt;Software engineers specialize in particular niches similar to authors specializing in particular structures. I build data applications with python to improve the experience of data scientists while poets use poems to create an experience for their readers. In the end, the best software engineers and writers are those who most effectively organize and present necessary information to their audience.&lt;/p&gt;

&lt;p&gt;It is sometimes easy to miss when this is done well, but never hard to miss when done poorly. Everyone knows the absolute frustration of using software that is particularly difficult to understand or flat out doesn’t do what its supposed to. While bad writing leaves you lost, or worse, leaves you in apparent understanding, only later finding you completely missed the point the author wanted to get across (something I’ve had happen in my writing many a time). Both of these are results of bad information organization. At some point the creators mis executed along their path to creating the experience they planned on.&lt;/p&gt;

&lt;p&gt;Most disciplines share the same underlying principles. These hidden connections is what makes me so sad about the all too common “Good at math, bad at writing” label given to so many students at such a young age. It is harmful to plant this idea in a young mind, blocking them from the hidden connections they then don’t bother to look for. I’ve come to realize how important and enjoyable writing is in my everyday life. Not only do you need to write more than ever to communicate with work colleagues via slack and email, but nothing can help boost memory more than writing well thought out notes about new topics and ideas.&lt;/p&gt;

&lt;p&gt;I’m angry at any teacher who allowed this idea to propagate or ever did a shitty job teaching an English class. English teachers have such a great opportunity to showcase how important writing is to every aspect of life and they squandered it.&lt;/p&gt;

&lt;p&gt;This realization has been very important to me. I will forever despise the “good at math, bad at writing” because of the limitations it tricks people into thinking they have.&lt;/p&gt;</content><author><name></name></author><summary type="html">Good at Math, Bad at Writing</summary></entry><entry><title type="html">Exploring Metaflow</title><link href="https://ntorba.github.io/writing/jupyter/2020/03/08/metaflow-exploration.html" rel="alternate" type="text/html" title="Exploring Metaflow" /><published>2020-03-08T00:00:00-06:00</published><updated>2020-03-08T00:00:00-06:00</updated><id>https://ntorba.github.io/writing/jupyter/2020/03/08/metaflow-exploration</id><content type="html" xml:base="https://ntorba.github.io/writing/jupyter/2020/03/08/metaflow-exploration.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-03-08-metaflow-exploration.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;About&quot;&gt;About&lt;a class=&quot;anchor-link&quot; href=&quot;#About&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Netflix/metaflow&quot;&gt;metaflow&lt;/a&gt; is a python package open sourced by netflix to help data scientists easily scale their project workflows. Metaflow is mainly interacted with through decorators. In this post, we will get behind the scenes of how these decorators actually work.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;The-code&quot;&gt;The code&lt;a class=&quot;anchor-link&quot; href=&quot;#The-code&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To start, let's take a look at the &lt;a href=&quot;https://github.com/Netflix/metaflow/blob/master/metaflow/tutorials/00-helloworld/helloworld.py&quot;&gt;first example&lt;/a&gt; in the documentation. This is a simple flow.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;metaflow&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FlowSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinearFlow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlowSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@step&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@step&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;the data artifact is: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@step&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;the data artifact is still: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;LinearFlow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;We see that the LinearFlow python class inherits from metaflow's FlowSpec class, and each of the functions are decorated with &lt;code&gt;@step&lt;/code&gt;. As seen (here)[&lt;a href=&quot;https://docs.metaflow.org/metaflow/basics&quot;&gt;https://docs.metaflow.org/metaflow/basics&lt;/a&gt;], this basic flow follows metaflow's guidelines. However, what is actually happening? How does it turn our functions into pipeline steps? Let's start by taking a look at the Flowspec class.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;(Flowspec)[&lt;a href=&quot;https://github.com/Netflix/metaflow/blob/master/metaflow/flowspec.py&quot;&gt;https://github.com/Netflix/metaflow/blob/master/metaflow/flowspec.py&lt;/a&gt;] definition and constructor. Full code can be found at the link.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FlowSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    Main class from which all Flows should inherit.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    Attributes&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    ----------&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    script_name&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    index&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    input&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Attributes that are not saved in the datastore when checkpointing.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Name starting with &amp;#39;__&amp;#39;, methods, functions and Parameters do not need&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# to be listed.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_EPHEMERAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;_EPHEMERAL&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;s1&quot;&gt;&amp;#39;_datastore&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;s1&quot;&gt;&amp;#39;_cached_input&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;s1&quot;&gt;&amp;#39;_graph&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;s1&quot;&gt;&amp;#39;_flow_decorators&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;s1&quot;&gt;&amp;#39;_steps&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;s1&quot;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;s1&quot;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;_flow_decorators&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use_cli&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        Construct a FlowSpec&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        Parameters&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        ----------&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        use_cli : bool, optional, default: True&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;            Set to True if the flow is invoked from __main__ or the command line&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_datastore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_transition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cached_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FlowGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_steps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use_cli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# we import cli here to make sure custom parameters in&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# args.py get fully evaluated before cli.py is imported.&lt;/span&gt;
            &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ntorba.github.io/writing/images/chart-preview.png" /><media:content medium="image" url="https://ntorba.github.io/writing/images/chart-preview.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>