{
  
    
        "post0": {
            "title": "Local Kubernetes on KIND",
            "content": "Intro . This is part one of a series learning about kubernetes through seldon-core. In this post, I will introduce, Kind, an awesome tool to run a kubernetes cluster on your local computer and some basic commands to interact with the cluster (I highly suggest downloading kubectx and kubens!) If you are brand new to kubernetes, I highly reccomend you first go follow the kubernetes interactive tutorial to first get a handle on basic interactions. Then, come back here to have some more fun on your own cluster. If you already have access to a kubernetes cluster and want to lean about seldon-core, check out part 2! . Install kubectl . If this is the fisrt time you&#39;ve used kubernetes, you will need to install kubectl, the command line tool for interacting with kubernetes. This can be downloaded here. On mac you can use brew install kubectl. Check your install by running: . !kubectl version --client . Client Version: version.Info{Major:&#34;1&#34;, Minor:&#34;18&#34;, GitVersion:&#34;v1.18.5&#34;, GitCommit:&#34;e6503f8d8f769ace2f338794c914a96fc335df0f&#34;, GitTreeState:&#34;clean&#34;, BuildDate:&#34;2020-07-04T14:53:16Z&#34;, GoVersion:&#34;go1.14.4&#34;, Compiler:&#34;gc&#34;, Platform:&#34;darwin/amd64&#34;} . If you see similar output, you are good to go! . Install Kind . If you&#39;re on mac, it&#39;s as simple as brew install kind. If not, check out this page: https://kind.sigs.k8s.io/docs/user/quick-start/ . Create your First Cluster . !kind create cluster . Creating cluster &#34;kind&#34; ... ‚úì Ensuring node image (kindest/node:v1.17.0) üñº ‚úì Preparing nodes üì¶ 7l ‚úì Writing configuration üìú7l ‚úì Starting control-plane üïπÔ∏è7l ‚úì Installing CNI üîå7l ‚úì Installing StorageClass üíæ7l Set kubectl context to &#34;kind-kind&#34; You can now use your cluster with: kubectl cluster-info --context kind-kind Thanks for using kind! üòä . It&#39;s as simple as that. If it is your first time running kind, it will need to download the appropiate docker image (something like kindest/node:1.17.0), which may take a few minutes. After that command is finished you can check your cluster by running: . !kubectl cluster-info . Kubernetes master is running at https://127.0.0.1:32771 KubeDNS is running at https://127.0.0.1:32771/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy To further debug and diagnose cluster problems, use &#39;kubectl cluster-info dump&#39;. . If you see output like above, displaying info about your Kubernetes master and KubeDNS, then you have successfully launched a local kubernetes cluster! .",
            "url": "https://ntorba.github.io/writing/jupyter/2020/07/17/local-kubernetes.html",
            "relUrl": "/jupyter/2020/07/17/local-kubernetes.html",
            "date": " ‚Ä¢ Jul 17, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Learning Kubernetes Through Seldon",
            "content": "Intro . I recently starte working with with the seldon-core project. I am working on a team now that is developing an ML platform to allower researchers to quickly serve and monitor ML models at scale. Seldon-core is a fantastic tool to build on top of for this project. Seldon-core deploys models at scale by leveraging kubernetes. The only problem was, I had never used kubernetes before. . Why Seldon-core? . Seldon-core is an open source projects built by the London based startup Seldon. With seldon-core, you can use python (and java) to easily deploy ML models built in any framework at scale. However, they offer tools for more than just model serving. With seldon-core, you construct an inference graph. The inference graph is built with these components: * Model * Transformer * Combiner * Router These additional components add the ability to create much more than just a single model. You can set up custom A/B tests, or 1-armed bandit systems with the router, combine results from two different models with the combiner, and have independent components (which allows separate scale settings) to transform the input data. Seldon-core inference graphs are powerful! . What‚Äôs this series? . In order to take advantage of seldon-core, you need to become familiar with some basic kubernetes fundamentals, so that‚Äôs what I did. First, I followed the kubernetes interactive tutorial to get a handle. Then, I dove right into seldon deployments. Working with seldon-core and building implementations of projects is a great way to get the kubernetes basics down. At the start, I couldn‚Äôt tell you the difference between a kubernetes deployment and a service. Although I‚Äôm not an expert now, I‚Äôm comfortable with seldon deployments, all the components they run on top of, and how to quickly debug my implementations by checking through the logs of containers scattered throughout the different components of my seldon deployments. In this post, I link to, in order, posts I‚Äôve written detailing the concepts and tools I learned to become confident in building and deploying at scale with seldon-core. . TOC . * [Kubernetes on KIND](). Use this resource to get a local kubernetes cluster up and download [kubectl](), [kubens](), and [kubectx]() to make interacting with your cluster a breeze. You can skip this section if you already have access to a kubernetes cluster. * [Seldon Deployments: Custom Resources on Kubernetes](). Create your first seldon deployment and read about what makes the seldon deployment custom resource so useful. * [Debugging Seldon Deployments](). Take a look at where to find your logs and diagnosis some common issues. * [Advanced Seldon Deployments](). Explore deploying to multiple pods and defining Horizontal Pod Autoscaling. * [CD with Argocd](). Explore how to use argocd to continuously deploy. .",
            "url": "https://ntorba.github.io/writing/markdown/torba/seldon/kubernetes/python/2020/07/17/learning-kubernetes-through-seldon.html",
            "relUrl": "/markdown/torba/seldon/kubernetes/python/2020/07/17/learning-kubernetes-through-seldon.html",
            "date": " ‚Ä¢ Jul 17, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Good At Math Bad At Writing",
            "content": "Good at Math, Bad at Writing . The biggest failure of my education was the acceptance of the ‚Äúgood at math, bad at writing‚Äù label. It comes as no surprise that I ended up working as a software engineer, but it took until now to see how much time I wasted hating writing, when in fact, the underlying principles are strikingly similar. . Looking at the end product, the similarities are hard to see. Books and programs are much different, but the process to generate them is quite similar. For both, the ultimate goal is to give the user/reader (‚Äúuser‚Äù for software and ‚Äúreader‚Äù for writing - they serve the same purpose) a particular experience by providing information in a well thought out structure. This goal is achieved using a set of tools and conventions. Software leverages programming languages with different designs (object oriented vs functional, for example) and frameworks (web application vs data application). Writing leverages spoken language with accepted structures such as short-stories, books, long-form, and poems. In both, deciding the general structure and design (picking a programming language vs picking a writing structure) is integral to creating the end experience you wish to generate. . Software engineers specialize in particular niches similar to authors specializing in particular structures. I build data applications with python to improve the experience of data scientists while poets use poems to create an experience for their readers. In the end, the best software engineers and writers are those who most effectively organize and present necessary information to their audience. . It is sometimes easy to miss when this is done well, but never hard to miss when done poorly. Everyone knows the absolute frustration of using software that is particularly difficult to understand or flat out doesn‚Äôt do what its supposed to. While bad writing leaves you lost, or worse, leaves you in apparent understanding, only later finding you completely missed the point the author wanted to get across (something I‚Äôve had happen in my writing many a time). Both of these are results of bad information organization. At some point the creators mis executed along their path to creating the experience they planned on. . Most disciplines share the same underlying principles. These hidden connections is what makes me so sad about the all too common ‚ÄúGood at math, bad at writing‚Äù label given to so many students at such a young age. It is harmful to plant this idea in a young mind, blocking them from the hidden connections they then don‚Äôt bother to look for. I‚Äôve come to realize how important and enjoyable writing is in my everyday life. Not only do you need to write more than ever to communicate with work colleagues via slack and email, but nothing can help boost memory more than writing well thought out notes about new topics and ideas. . I‚Äôm angry at any teacher who allowed this idea to propagate or ever did a shitty job teaching an English class. English teachers have such a great opportunity to showcase how important writing is to every aspect of life and they squandered it. . This realization has been very important to me. I will forever despise the ‚Äúgood at math, bad at writing‚Äù because of the limitations it tricks people into thinking they have. .",
            "url": "https://ntorba.github.io/writing/2020/05/07/Good-at-Math-Bad-At-Writing.html",
            "relUrl": "/2020/05/07/Good-at-Math-Bad-At-Writing.html",
            "date": " ‚Ä¢ May 7, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Exploring Metaflow",
            "content": "About . metaflow is a python package open sourced by netflix to help data scientists easily scale their project workflows. Metaflow is mainly interacted with through decorators. In this post, we will get behind the scenes of how these decorators actually work. . The code . To start, let&#39;s take a look at the first example in the documentation. This is a simple flow. . from metaflow import FlowSpec, step class LinearFlow(FlowSpec): @step def start(self): self.my_var = &#39;hello world&#39; self.next(self.a) @step def a(self): print(&#39;the data artifact is: %s&#39; % self.my_var) self.next(self.end) @step def end(self): print(&#39;the data artifact is still: %s&#39; % self.my_var) LinearFlow() . We see that the LinearFlow python class inherits from metaflow&#39;s FlowSpec class, and each of the functions are decorated with @step. As seen (here)[https://docs.metaflow.org/metaflow/basics], this basic flow follows metaflow&#39;s guidelines. However, what is actually happening? How does it turn our functions into pipeline steps? Let&#39;s start by taking a look at the Flowspec class. . (Flowspec)[https://github.com/Netflix/metaflow/blob/master/metaflow/flowspec.py] definition and constructor. Full code can be found at the link. . class FlowSpec(object): &quot;&quot;&quot; Main class from which all Flows should inherit. Attributes - script_name index input &quot;&quot;&quot; # Attributes that are not saved in the datastore when checkpointing. # Name starting with &#39;__&#39;, methods, functions and Parameters do not need # to be listed. _EPHEMERAL = {&#39;_EPHEMERAL&#39;, &#39;_datastore&#39;, &#39;_cached_input&#39;, &#39;_graph&#39;, &#39;_flow_decorators&#39;, &#39;_steps&#39;, &#39;index&#39;, &#39;input&#39;} _flow_decorators = {} def __init__(self, use_cli=True): &quot;&quot;&quot; Construct a FlowSpec Parameters - use_cli : bool, optional, default: True Set to True if the flow is invoked from __main__ or the command line &quot;&quot;&quot; self.name = self.__class__.__name__ self._datastore = None self._transition = None self._cached_input = {} self._graph = FlowGraph(self.__class__) self._steps = [getattr(self, node.name) for node in self._graph] if use_cli: # we import cli here to make sure custom parameters in # args.py get fully evaluated before cli.py is imported. from . import cli cli.main(self) .",
            "url": "https://ntorba.github.io/writing/jupyter/2020/03/08/metaflow-exploration.html",
            "relUrl": "/jupyter/2020/03/08/metaflow-exploration.html",
            "date": " ‚Ä¢ Mar 8, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Figuring Out The Brain",
            "content": "Intro . Mathew Cobb recently wrote Why your brain is not a computer on The Guardian. Thank you to Data Science Weekly and Data Exlixir newsletters for sending both sending this to me. . Summary . In this article, Cobb details some of history of the ‚Äúbrain as a computer metaphor.‚Äù With the rise of AI, this topic has become very relevant. There are many smart people in many different camps, and its hard to figure out who has the best information when there is so much out there. . My Thoughts . While reading this, an idea from a software engineering article I recently read struck me: ‚ÄúIt is easier to write code than to read it.‚Äù The consequences of this fact are littered throughout code bases and can help us understand our struggle to understand the brain. . Reading code is a form of reverse engineering. Working in the reverse direction is often much more difficult than building from the ground up. This is counter-intuitive until you experience it. Very commonly in software, problems that seem quicky and easy end up thorny and difficult. So, a motivated engineer sees a big jumble of old code for an ‚Äúeasy‚Äù problem and decides this other person must have been an idiot, so they decide to take their own stab at it, only to find that their new solution is a new fangled mess as well. . This situaiton is prominent in other work as well. Many tasks are forms of reverse engineering - reading even! It is easier to write and understand your own thoughts than to read and understand someone else‚Äôs. So, if we humans find reverse engineering so difficult for these everyday tasks, its not wonder its been such a nightmare trying to reverse engineer the brain (I guess it‚Äôs a shame evolution isn‚Äôt a better author). It is no wonder our main metaphor for the brain is computers. We built computers and use them everyday. They are the closest analogue we have, although they are quite different. . This line of thought puts me firmly in the ‚Äúbetter metaphor for understanding‚Äù category. The only chance humans have to understand the brain is to continue to try to build our own version then compare the outcome. . If we were given a modern computer 100 years ago, would it have advanced the rate of technology? I suppose not. It would have been so advanced that the people of the times wouldn‚Äôt have known where to start reverse engineering such a complex technology. So it is with the brain. It has somehow put itself far ahead of our time, out of reach of reverse engineering, a skill we so desperately wish we were proficient at for this task. .",
            "url": "https://ntorba.github.io/writing/markdown/torba/philosophy/first%20draft/2020/03/07/figuring-out-the-brain.html",
            "relUrl": "/markdown/torba/philosophy/first%20draft/2020/03/07/figuring-out-the-brain.html",
            "date": " ‚Ä¢ Mar 7, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . Front Matter is a markdown cell at the beginning of your notebook that allows you to inject metadata into your notebook. For example: . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks just like you can with markdown. . For example, here is a footnote 1. . . This is the footnote.&#8617; . |",
            "url": "https://ntorba.github.io/writing/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " ‚Ä¢ Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Test Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a ‚Äúlevel 1 heading‚Äù in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here‚Äôs a footnote 1. Here‚Äôs a horizontal rule: . . Lists . Here‚Äôs a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes ‚Ä¶and‚Ä¶ . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 . Footnotes . This is the footnote.¬†&#8617; . |",
            "url": "https://ntorba.github.io/writing/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " ‚Ä¢ Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "About Us . Just out here tryna write cuz it seems like it‚Äôs a good thing to get good at. .",
          "url": "https://ntorba.github.io/writing/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}